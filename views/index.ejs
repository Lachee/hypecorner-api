<html>
    <title>HypeCorner Embed Player</title>
    <head>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.1.1/gsap.min.js"></script>
        <style>
            * { padding: 0; margin: 0; }

            .transition-container {
                position: fixed;
                left: 0;
                left: 0;
                width: 100%;
                height: 100%;
                display: flex;
                z-index: 10;
                pointer-events: none;
            }
            .transition-container span {
                position: relative;
            }
            .transition-container.from-top span {
                background: #aa4fff;
                height: 0%;
                width: 100%;
            }

        </style>
    </head>
    <body>

        <div class="transition-container from-top">
            <span class="tile"></span>
            <span class="tile"></span>
            <span class="tile"></span>
            <span class="tile"></span>
            <span class="tile"></span>
            <span class="tile"></span>
        </div>

        <!-- Add a placeholder for the Twitch embed -->
        <div id="twitch-embed"></div>
        <script src="https://embed.twitch.tv/embed/v1.js"></script>

        <!-- Create a Twitch.Embed object that will render within the "twitch-embed" root element. -->
        <script type="text/javascript">
            var twitchChannel = "<%= channel %>";
            var twitchEmbed = new Twitch.Embed("twitch-embed", {
                channel: twitchChannel,
                layout: "<%= chat ? 'video-chat' : 'video' %>",
                height: "100%",
                width: "100%",
            });

            var protocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
            var host = protocol + "//" + window.location.host + "/api/gateway";
     
            connect(host);
     
            /** Changes the twitch channel */
            function changeChannel(name) {
                if (name != twitchChannel) {
                    //Store the name
                    console.log("New Channel", name);
                    twitchChannel = name;
                    
                    //Call the stinger, when its mid way then we will tell twitch to update
                    stingerIn(() => {
                        twitchEmbed.setChannel(twitchChannel);
                        twitchEmbed.addEventListener(Twitch.Embed.VIDEO_PLAY, () => {
                            stingerOut();
                        }, { once: true });
                    });
                }
            }
            
            /** Shows the preroll */
            function preroll(duration = 1000) {
                console.log("Preroll Shown!");
            }

            /** Sets the score display */
            function score(scores) {
                console.log("Scores!", scores);
            }

            /** Connect handles the WebSockets */
            function connect(host) {
                
                //Connect and listen to events
                var ws = new WebSocket(host);

                //We have opened, so change the initial channel
                ws.addEventListener("open", (event) => { 
                    console.log("open", event);
                    fetch('/api/channel').then(async (data) => {
                        var result = await data.json();
                        changeChannel(result.name);
                    });
                });

                //We closed, reconnect
                ws.addEventListener("close", (event) => { 
                    console.warn("Live Watch has terminated", event); 
                    connect(host);
                });
                
                //We have an event, so lets parse
                ws.addEventListener("message", (event) => { 
                    var payload = JSON.parse(event.data);
                    console.log("WS EVENT", payload.e, payload.d);
                    switch(payload.e) {
                        default: break;
                        case 'ORCHESTRA_CHANGE':
                            changeChannel(payload.d.name);
                            break;
                        case 'ORCHESTRA_PREROLL':
                            preroll(payload.d.duration);
                            break;
                        case 'ORCHESTRA_SCORE':
                            score(payload.d);
                            break;
                    }
                });
            }

            /** Rolls the stinger in */
            function stingerIn(done = null) {
                let tl = gsap.timeline({ ease: "power4.inOut" });
                tl.to(".from-top .tile", {
                    duration: 0.4,
                    height: "100%",
                    top: "0%",
                    delay: 0.2,
                    stagger: 0.05,
                });

                //TODO: Turn this async
                if (done != null)
                    tl.add(done);
            }

            /** Rolls the stinger out */
            function stingerOut(done = null) {                
                let tl = gsap.timeline({ ease: "power4.inOut" });
 
                tl.to(".from-top .tile", {
                    duration: 0.4,
                    height: "100%",
                    top: "100%",
                    delay: 1,
                    stagger: -0.05,
                });
                tl.set(".from-top .tile", { top: "0", height: "0" });

                //TODO: Turn this async
                if (done != null)
                    tl.add(done);
            }


            /** Compelte Stinger. Obsolete */
            function stinger(midCallback = null) {
                let tl = gsap.timeline({ ease: "power4.inOut" });
                tl.to(".from-top .tile", {
                    duration: 0.4,
                    height: "100%",
                    top: "0%",
                    delay: 0.2,
                    stagger: 0.05,
                });
                
                if (midCallback != null)
                    tl.add(midCallback);
                
                tl.to(".from-top .tile", {
                    duration: 0.4,
                    height: "100%",
                    top: "100%",
                    delay: 0.2,
                    stagger: -0.05,
                });
                tl.set(".from-top .tile", { top: "0", height: "0" });
            }

		</script>
    </body>
</html>